name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        postgres-version: [13, 14, 15, 16]
      fail-fast: false
      
    services:
      postgres-13:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: pgsd_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=en_US.utf8
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres-14:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: pgsd_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=en_US.utf8
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres-15:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: pgsd_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=en_US.utf8
        ports:
          - 5435:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres-16:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: pgsd_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=en_US.utf8
        ports:
          - 5436:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-integration-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-integration-
            ${{ runner.os }}-${{ matrix.python-version }}-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Wait for PostgreSQL to be ready
        run: |
          for port in 5433 5434 5435 5436; do
            echo "Waiting for PostgreSQL on port $port..."
            for i in {1..30}; do
              if pg_isready -h localhost -p $port -U test_user; then
                echo "PostgreSQL on port $port is ready"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done
          done
          
      - name: Set up test databases
        run: |
          # Create test schemas and data
          for port in 5433 5434 5435 5436; do
            echo "Setting up test database on port $port..."
            PGPASSWORD=test_pass psql -h localhost -p $port -U test_user -d pgsd_test -c "
              CREATE SCHEMA IF NOT EXISTS test_basic;
              CREATE TABLE IF NOT EXISTS test_basic.test_table (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100)
              );
            " || echo "Schema setup failed for port $port"
          done
          
      - name: Run integration tests
        env:
          TEST_DB_HOST: localhost
          PGSD_LOG_LEVEL: DEBUG
        run: |
          pytest tests/integration/ \
            -v \
            --tb=short \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            -m "integration" \
            --maxfail=5 \
            --durations=10
            
      - name: Run full workflow tests
        env:
          TEST_DB_HOST: localhost
          PGSD_LOG_LEVEL: INFO
        run: |
          pytest tests/integration/test_full_workflow.py \
            -v \
            --tb=short \
            -m "not slow" \
            --maxfail=3
            
      - name: Run CLI integration tests
        env:
          TEST_DB_HOST: localhost
        run: |
          pytest tests/integration/test_cli_comprehensive.py \
            -v \
            --tb=short \
            --maxfail=3
            
      - name: Run database integration tests
        env:
          TEST_DB_HOST: localhost
        run: |
          pytest tests/integration/test_database_integration.py \
            -v \
            --tb=short \
            -m "not slow" \
            --maxfail=3
            
      - name: Test module execution
        run: |
          # Test that the module can be executed
          python -m pgsd version
          python -m pgsd --help
          
      - name: Test CLI commands
        env:
          TEST_DB_HOST: localhost
        run: |
          # Test basic CLI functionality
          python -m pgsd list-schemas \
            --host localhost \
            --port 5433 \
            --database pgsd_test \
            --user test_user \
            --password test_pass || echo "List schemas test completed"
            
      - name: Upload integration test coverage
        if: matrix.python-version == '3.11' && matrix.postgres-version == 16
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: pgsd_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Create large test schema
        run: |
          PGPASSWORD=test_pass psql -h localhost -p 5432 -U test_user -d pgsd_test -c "
            CREATE SCHEMA IF NOT EXISTS perf_test;
            $(for i in {1..100}; do
              echo \"CREATE TABLE perf_test.table_$i (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100),
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                data JSONB
              );\"
              echo \"CREATE INDEX idx_table_${i}_name ON perf_test.table_$i(name);\"
            done)
          "
          
      - name: Run performance tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
        run: |
          pytest tests/integration/ \
            -v \
            -m "slow" \
            --tb=short \
            --durations=0
            
      - name: Benchmark CLI performance
        env:
          TEST_DB_HOST: localhost
        run: |
          time python -m pgsd list-schemas \
            --host localhost \
            --port 5432 \
            --database pgsd_test \
            --user test_user \
            --password test_pass

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: [3.9, 3.12]  # Test oldest and newest supported versions
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Test basic functionality (no database)
        run: |
          python -m pgsd version
          python -m pgsd --help
          python -c "import pgsd; print('Import successful')"
          
      - name: Test configuration validation
        run: |
          pytest tests/integration/test_full_workflow.py::TestConfigurationIntegration::test_yaml_config_loading -v
          pytest tests/integration/test_full_workflow.py::TestConfigurationIntegration::test_environment_variable_integration -v
          
      - name: Test CLI argument parsing
        run: |
          pytest tests/integration/test_cli_comprehensive.py::TestArgumentParsing -v

  security-integration:
    name: Security Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          pip install bandit[toml] safety
          
      - name: Test SQL injection protection
        run: |
          pytest tests/integration/test_database_integration.py::TestDatabaseErrorHandling::test_invalid_query_handling -v
          
      - name: Test credential handling
        run: |
          pytest tests/integration/test_database_integration.py::TestDatabaseConnection::test_connection_with_invalid_credentials -v
          
      - name: Run security scan on integration tests
        run: |
          bandit -r tests/integration/ -f json || true
          
      - name: Check for security vulnerabilities
        run: |
          safety check --json || true